"use strict";(self.webpackChunkfront_cleio=self.webpackChunkfront_cleio||[]).push([[179],{48734:(e,t,a)=>{var l=a(89346),n=a(67294),r=a(20745);const s=()=>{const[e,t]=(0,n.useState)(!1);return[e,function(){t(!e)}]};var c=a(73935);const m=[{label:"M"},{label:"F"},{label:"Autre"}],i=e=>{switch(e){case"bpm":return"bpm";case"skintemp":return"T&deg;";case"spo2":return"SpO<sub>2</sub>";default:return""}},o=/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/,d=e=>{l.td_(".radioOption").classed("selected",!1),l.Ys(e.target).classed("selected",!0)},u=()=>{const e=l.Ys(".selected");return e.node()?"Autre"===e.node().innerText?"A":"M"===e.node().innerText||"F"===e.node().innerText?e.node().innerText:"N/A":null},E=(e,t)=>{let a;e?a=e.target:t&&(a=t);const n=a.value;let r,s=!1;if("name"===a.id||"firstName"===a.id)s=String(n).length>0,r=String(n);else if("age"===a.id){const e=parseInt(String(n));s=!isNaN(e),r=e}else"email"===a.id&&(s=o.test(n),r=n);return l.Ys(a).classed(s?"valid":"error",!0),e?s:t?[s,r,a.id]:void 0},p=e=>{l.Ys(e.target).classed("valid",!1),l.Ys(e.target).classed("error",!1)},v=()=>{const e=l.td_("input").nodes();let t=!0,a={};return e.map((e=>{let l=E(null,e);l[0]?a[`${l[2]}`]=l[1]:t=!1})),u()?a.sex=u():t=!1,a.curVitals={bpm:0,skintemp:0,spo2:0},[t,a]},N=e=>{let{isOpened:t,hide:a,action:l}=e;return t?c.createPortal(n.createElement(n.Fragment,null,n.createElement("div",{className:"modal-overlay"}),n.createElement("div",{className:"modal-wrapper","aria-modal":!0,"aria-hidden":!0,tabIndex:-1,role:"dialog"},n.createElement("div",{className:"modal"},n.createElement("div",{className:"modal-header"},n.createElement("h2",null,"Ajouter un patient")),n.createElement("form",null,n.createElement("div",{className:"form-group"},n.createElement("div",{className:"holder label"},n.createElement("label",null,"Nom")),n.createElement("div",{className:"holder input"},n.createElement("input",{className:"form-control",id:"name",onBlur:e=>{E(e,null)},onInput:p}))),n.createElement("div",{className:"form-group"},n.createElement("div",{className:"holder label"},n.createElement("label",null,"Prénom")),n.createElement("div",{className:"holder input"},n.createElement("input",{className:"form-control",id:"firstName",onBlur:e=>{E(e,null)},onInput:p}))),n.createElement("div",{className:"form-group"},n.createElement("div",{className:"holder label"},n.createElement("label",null,"Âge")),n.createElement("div",{className:"holder input"},n.createElement("input",{className:"form-control",id:"age",onBlur:e=>{E(e,null)},onInput:p}))),n.createElement("div",{className:"form-group"},n.createElement("div",{className:"holder label"},n.createElement("label",null,"Sexe")),n.createElement("div",{className:"holder input"},n.createElement("div",{className:"radioHolder"},m.map(((e,t)=>n.createElement("div",{key:`${e.label}`,className:"radioOption",onClick:d},n.createElement("p",null,e.label))))))),n.createElement("div",{className:"form-group"},n.createElement("div",{className:"holder label"},n.createElement("label",null,"Email")),n.createElement("div",{className:"holder input"},n.createElement("input",{className:"form-control",id:"email",onBlur:e=>{E(e,null)},onInput:p})))),n.createElement("div",{className:"btnArray"},n.createElement("div",{className:"btnHolder"},n.createElement("div",{className:"btn cancel",onClick:a},n.createElement("p",null,"Annuler"))),n.createElement("div",{className:"btnHolder"},n.createElement("div",{className:"btn accept",onClick:()=>{v()[0]&&(l(v()[1]),a())}},n.createElement("p",null,"Confirmer"))))))),document.body):null};var h=a(25935);const b=e=>{let{isOpened:t,hide:a,patient:l,vitals:r,action:s}=e;return t?c.createPortal(n.createElement(n.Fragment,null,n.createElement("div",{className:"modal-overlay"}),n.createElement("div",{className:"modal-wrapper","aria-modal":!0,"aria-hidden":!0,tabIndex:-1,role:"dialog"},n.createElement("div",{className:"modal"},n.createElement("div",{className:"x-holder"},n.createElement("img",{onClick:a,src:"assets/img/x.png"})),n.createElement("div",{className:"modal-header"},n.createElement("h2",null,"Visualiser un patient")),l?n.createElement("div",{className:"modal-body"},n.createElement("div",{className:"modal-unit inline"},n.createElement("p",null,l.firstName," "),n.createElement("p",null,n.createElement("b",null,l.name))),n.createElement("div",{className:"modal-unit inline"},n.createElement("p",null,l.age," ans • "),n.createElement("p",null,(e=>{switch(e){case"F":return"Femme";case"M":return"Homme";case"A":return"Autre";default:return"N/A"}})(l.sex))),n.createElement("div",{className:"modal-unit inline"},n.createElement("p",null,l.email))):null,n.createElement("div",{className:"table-holder"},l&&r?n.createElement("table",{className:"vitals-table",cellSpacing:"0"},n.createElement("thead",{className:"vitalheaderrow"},n.createElement("tr",null,n.createElement("th",null),r.headers.map(((e,t)=>n.createElement("th",{key:t},(0,h.ZP)(i(e)))))),n.createElement("tr",null,n.createElement("td",null,n.createElement("h3",null,"Statistiques")),r.headers.map(((e,t)=>n.createElement("td",{key:t}," ")))),((e,t)=>{let a={};return t.map(((e,t)=>{a[e]=0})),e.slice(0,30).forEach(((e,t)=>{Object.entries(e[1]).forEach(((e,t)=>{const l=e[0],n=e[1];a[l]=parseFloat(a[l]+n)}))})),Object.keys(a).forEach((e=>{a[e]="bpm"===e?parseInt(a[e]/30):"skintemp"===e?parseFloat(parseFloat(a[e]/30).toFixed(2)):parseFloat(parseFloat(a[e]/30).toFixed(3))})),n.createElement("tr",{className:"vitalrow"},n.createElement("td",null,"Moyenne des 5 dernières minutes"),Object.values(a).map(((e,t)=>n.createElement("td",{key:t},e))))})(Object.entries(r.measurements).reverse(),r.headers),n.createElement("tr",null,n.createElement("td",null,n.createElement("h3",null,"Données")),r.headers.map(((e,t)=>n.createElement("td",{key:t}," "))))),n.createElement("tbody",{className:"data-holder"},Object.entries(r.measurements).reverse().map(((e,t)=>n.createElement("tr",{className:"vitalrow",key:t},n.createElement("td",null,e[0]),Object.entries(e[1]).map(((e,t)=>n.createElement("td",{key:t},e[1])))))))):null)))),document.body):null};function f(e){const t={name:e.patientData.name,firstName:e.patientData.firstName,age:e.patientData.age,sex:e.patientData.sex,contact:e.patientData.email,patientID:e.patientData.patientID,vitals:e.patientData.curVitals};return n.createElement("div",{className:"patientEntry"},n.createElement("div",{className:"division names"},n.createElement("h4",null,t.name),n.createElement("p",null,t.firstName)),n.createElement("div",{className:"division age"},n.createElement("h5",null,t.age," ans")),n.createElement("div",{className:"division sex"},n.createElement("h5",null,t.sex)),n.createElement("div",{className:"division contact"},n.createElement("h5",null,n.createElement("a",{href:`mailto:${t.contact}`},"Contact"))),n.createElement("div",{className:"division vitals"},Object.entries(t.vitals).map(((e,t)=>n.createElement("div",{key:t,className:"vitalUnit"},n.createElement("p",{className:"type"},(0,h.ZP)(i(e[0]))),n.createElement("h5",{className:"value"},e[1]))))),n.createElement("div",{className:"division eye",onClick:()=>{e.showPatient(t.patientID)}},n.createElement("img",{src:"assets/img/eye.png"})),n.createElement("div",{className:"division delete",onClick:()=>{e.deletePatient(t.patientID)}},n.createElement("img",{src:"assets/img/bin.png"})))}const g="https://cleio-server.herokuapp.com/api";function y(e,t){return fetch(`${g}${e}`,{method:"GET",headers:{Accept:"application/json","Content-Type":"application/json"}}).then((e=>e.json())).then((e=>e)).catch((e=>(console.log("Error sending Get request: ",e),null)))}function k(e,t,a){const l={method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(a)};return fetch(`${g}${e}`,l).then((e=>e.json())).then((e=>e)).catch((e=>(console.log("Error sending Post request:",e),null)))}function w(e){const[t,a]=(0,n.useState)(null),[l,r]=s(),[c,m]=s(),[i,o]=(0,n.useState)(null),[d,u]=(0,n.useState)(null);(0,n.useEffect)((()=>{E()}),[]),function(e,t){const a=(0,n.useRef)();(0,n.useEffect)((()=>{a.current=e}),[e]),(0,n.useEffect)((()=>{{let e=setInterval((function(){a.current()}),t);return()=>clearInterval(e)}}),[t])}((()=>{E(),i&&p(i.patientID)}),1e4),(0,n.useEffect)((()=>{}),[i]),(0,n.useEffect)((()=>{}),[d]);const E=()=>{y("/patients").then((e=>{a(e)}))},p=e=>{y(`/vitals/${e}`).then((e=>{e.results&&u(e.results)}))},v=e=>{k(`/patients/delete/${e}`,0,{}).then((e=>{E()}))},h=e=>{const t=parseInt(e);m(!0),y(`/patients/${t}`).then((e=>{e.results&&(o(e.results),p(t))}))};return n.createElement("div",{className:"mainframe"},n.createElement("div",{className:"header"},n.createElement("div",{className:"labelHolder"},n.createElement("h2",null,"Tableau de bord")),n.createElement("div",{className:"buttonHolder"},n.createElement("div",{className:"btn",onClick:r},n.createElement("p",null,"Ajouter")))),n.createElement("div",{className:"patientList"},t?t.map(((e,t)=>n.createElement(f,{key:t,patientData:e,deletePatient:v,showPatient:h}))):""),n.createElement("div",{className:"link-holder"},n.createElement("p",null,n.createElement("a",{href:"https://docs.google.com/presentation/d/1Yuvrv6VnN413m8KntJcfW60Uw5WQd7B5XJyjbiaDK_Y/edit?usp=sharing"},"Link to presentation"))),n.createElement(N,{isOpened:l,hide:r,action:e=>{k("/patients/new",0,e).then((e=>{E()}))}}),n.createElement(b,{isOpened:c,hide:()=>{m(),o(null),u(null)},patient:i,vitals:d,action:()=>{console.log("not implemented.")}}))}r.createRoot(document.getElementById("root")).render(n.createElement(w,null))}},e=>{var t=t=>e(e.s=t);e.O(0,[216],(()=>(t(28594),t(35666),t(48734)))),e.O()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,