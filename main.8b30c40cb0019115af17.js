"use strict";(self.webpackChunkfront_cleio=self.webpackChunkfront_cleio||[]).push([[179],{48734:(e,t,a)=>{var l=a(89346),n=a(67294),r=a(20745);const s=()=>{const[e,t]=(0,n.useState)(!1);return[e,function(){t(!e)}]};var c=a(73935);const m=[{label:"M"},{label:"F"},{label:"Autre"}],i=e=>{switch(e){case"bpm":return"bpm";case"skintemp":return"T&deg;";case"spo2":return"SpO<sub>2</sub>";default:return""}},o=/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/,d=e=>{l.td_(".radioOption").classed("selected",!1),l.Ys(e.target).classed("selected",!0)},u=()=>{const e=l.Ys(".selected");return e.node()?"Autre"===e.node().innerText?"A":"M"===e.node().innerText||"F"===e.node().innerText?e.node().innerText:"N/A":null},E=(e,t)=>{let a;e?a=e.target:t&&(a=t);const n=a.value;let r,s=!1;if("name"===a.id||"firstName"===a.id)s=String(n).length>0,r=String(n);else if("age"===a.id){const e=parseInt(String(n));s=!isNaN(e),r=e}else"email"===a.id&&(s=o.test(n),r=n);return l.Ys(a).classed(s?"valid":"error",!0),e?s:t?[s,r,a.id]:void 0},p=e=>{l.Ys(e.target).classed("valid",!1),l.Ys(e.target).classed("error",!1)},v=()=>{const e=l.td_("input").nodes();let t=!0,a={};return e.map((e=>{let l=E(null,e);l[0]?a[`${l[2]}`]=l[1]:t=!1})),u()?a.sex=u():t=!1,a.curVitals={bpm:0,skintemp:0,spo2:0},[t,a]},h=e=>{let{isOpened:t,hide:a,action:l}=e;return t?c.createPortal(n.createElement(n.Fragment,null,n.createElement("div",{className:"modal-overlay"}),n.createElement("div",{className:"modal-wrapper","aria-modal":!0,"aria-hidden":!0,tabIndex:-1,role:"dialog"},n.createElement("div",{className:"modal"},n.createElement("div",{className:"modal-header"},n.createElement("h2",null,"Ajouter un patient")),n.createElement("form",null,n.createElement("div",{className:"form-group"},n.createElement("div",{className:"holder label"},n.createElement("label",null,"Nom")),n.createElement("div",{className:"holder input"},n.createElement("input",{className:"form-control",id:"name",onBlur:e=>{E(e,null)},onInput:p}))),n.createElement("div",{className:"form-group"},n.createElement("div",{className:"holder label"},n.createElement("label",null,"Prénom")),n.createElement("div",{className:"holder input"},n.createElement("input",{className:"form-control",id:"firstName",onBlur:e=>{E(e,null)},onInput:p}))),n.createElement("div",{className:"form-group"},n.createElement("div",{className:"holder label"},n.createElement("label",null,"Âge")),n.createElement("div",{className:"holder input"},n.createElement("input",{className:"form-control",id:"age",onBlur:e=>{E(e,null)},onInput:p}))),n.createElement("div",{className:"form-group"},n.createElement("div",{className:"holder label"},n.createElement("label",null,"Sexe")),n.createElement("div",{className:"holder input"},n.createElement("div",{className:"radioHolder"},m.map(((e,t)=>n.createElement("div",{key:`${e.label}`,className:"radioOption",onClick:d},n.createElement("p",null,e.label))))))),n.createElement("div",{className:"form-group"},n.createElement("div",{className:"holder label"},n.createElement("label",null,"Email")),n.createElement("div",{className:"holder input"},n.createElement("input",{className:"form-control",id:"email",onBlur:e=>{E(e,null)},onInput:p})))),n.createElement("div",{className:"btnArray"},n.createElement("div",{className:"btnHolder"},n.createElement("div",{className:"btn cancel",onClick:a},n.createElement("p",null,"Annuler"))),n.createElement("div",{className:"btnHolder"},n.createElement("div",{className:"btn accept",onClick:()=>{v()[0]&&(l(v()[1]),a())}},n.createElement("p",null,"Confirmer"))))))),document.body):null};var N=a(25935);const f=(e,t,a)=>{let l={};return a.forEach(((a,n)=>{const r=Array.from(t).sort(((t,l)=>{const n=t[1],r=l[1];return e?r[a]-n[a]:n[a]-r[a]}))[0];l[a]=r[1][a]})),[l,e?"Maximum":"Minimum"]},b=(e,t,a)=>{let l;const r=t.slice(0,30);switch(e){case"mean":l=((e,t)=>{let a={};return t.forEach(((t,l)=>{const n=Array.from(e).reduce(((e,a)=>e+a[1][t]),0);a[t]="bpm"===t?parseInt(n/Array.from(e).length):parseFloat(parseFloat(n/Array.from(e).length).toFixed("skintemp"===t?2:3))})),[a,"Moyenne"]})(r,a);break;case"max":l=f(!0,r,a);break;case"min":l=f(!1,r,a)}return n.createElement("tr",{className:"vitalrow"},n.createElement("td",null,l[1]),Object.values(l[0]).map(((e,t)=>n.createElement("td",{key:t},e))))},g=e=>{let{isOpened:t,hide:a,patient:l,vitals:r,action:s}=e;return t?c.createPortal(n.createElement(n.Fragment,null,n.createElement("div",{className:"modal-overlay"}),n.createElement("div",{className:"modal-wrapper","aria-modal":!0,"aria-hidden":!0,tabIndex:-1,role:"dialog"},n.createElement("div",{className:"modal"},n.createElement("div",{className:"x-holder"},n.createElement("img",{onClick:a,src:"assets/img/x.png"})),n.createElement("div",{className:"modal-header"},n.createElement("h2",null,"Visualiser un patient")),l?n.createElement("div",{className:"modal-body"},n.createElement("div",{className:"modal-unit inline"},n.createElement("p",null,l.firstName," "),n.createElement("p",null,n.createElement("b",null,l.name))),n.createElement("div",{className:"modal-unit inline"},n.createElement("p",null,l.age," ans • "),n.createElement("p",null,(e=>{switch(e){case"F":return"Femme";case"M":return"Homme";case"A":return"Autre";default:return"N/A"}})(l.sex))),n.createElement("div",{className:"modal-unit inline"},n.createElement("p",null,l.email))):null,n.createElement("div",{className:"table-holder"},l&&r?n.createElement("table",{className:"vitals-table",cellSpacing:"0"},n.createElement("thead",{className:"vitalheaderrow"},n.createElement("tr",null,n.createElement("th",null),r.headers.map(((e,t)=>n.createElement("th",{key:t},(0,N.ZP)(i(e)))))),n.createElement("tr",null,n.createElement("td",null,n.createElement("h3",null,"Statistiques (5 dernières minutes)")),r.headers.map(((e,t)=>n.createElement("td",{key:t}," ")))),b("mean",Object.entries(r.measurements).reverse(),r.headers),b("max",Object.entries(r.measurements).reverse(),r.headers),b("min",Object.entries(r.measurements).reverse(),r.headers),n.createElement("tr",null,n.createElement("td",null,n.createElement("h3",null,"Données")),r.headers.map(((e,t)=>n.createElement("td",{key:t}," "))))),n.createElement("tbody",{className:"data-holder"},Object.entries(r.measurements).reverse().map(((e,t)=>n.createElement("tr",{className:"vitalrow",key:t},n.createElement("td",null,e[0]),Object.entries(e[1]).map(((e,t)=>n.createElement("td",{key:t},e[1])))))))):null)))),document.body):null};function y(e){const t={name:e.patientData.name,firstName:e.patientData.firstName,age:e.patientData.age,sex:e.patientData.sex,contact:e.patientData.email,patientID:e.patientData.patientID,vitals:e.patientData.curVitals};return n.createElement("div",{className:"patientEntry"},n.createElement("div",{className:"division names"},n.createElement("h4",null,t.name),n.createElement("p",null,t.firstName)),n.createElement("div",{className:"division age"},n.createElement("h5",null,t.age," ans")),n.createElement("div",{className:"division sex"},n.createElement("h5",null,t.sex)),n.createElement("div",{className:"division contact"},n.createElement("h5",null,n.createElement("a",{href:`mailto:${t.contact}`},"Contact"))),n.createElement("div",{className:"division vitals"},Object.entries(t.vitals).map(((e,t)=>n.createElement("div",{key:t,className:"vitalUnit"},n.createElement("p",{className:"type"},(0,N.ZP)(i(e[0]))),n.createElement("h5",{className:"value"},e[1]))))),n.createElement("div",{className:"division eye",onClick:()=>{e.showPatient(t.patientID)}},n.createElement("img",{src:"assets/img/eye.png"})),n.createElement("div",{className:"division delete",onClick:()=>{e.deletePatient(t.patientID)}},n.createElement("img",{src:"assets/img/bin.png"})))}const k="https://cleio-server.herokuapp.com/api";function w(e,t){return fetch(`${k}${e}`,{method:"GET",headers:{Accept:"application/json","Content-Type":"application/json"}}).then((e=>e.json())).then((e=>e)).catch((e=>(console.log("Error sending Get request: ",e),null)))}function x(e,t,a){const l={method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(a)};return fetch(`${k}${e}`,l).then((e=>e.json())).then((e=>e)).catch((e=>(console.log("Error sending Post request:",e),null)))}function O(e){const[t,a]=(0,n.useState)(null),[l,r]=s(),[c,m]=s(),[i,o]=(0,n.useState)(null),[d,u]=(0,n.useState)(null);(0,n.useEffect)((()=>{E()}),[]),function(e,t){const a=(0,n.useRef)();(0,n.useEffect)((()=>{a.current=e}),[e]),(0,n.useEffect)((()=>{{let e=setInterval((function(){a.current()}),t);return()=>clearInterval(e)}}),[t])}((()=>{E(),i&&p(i.patientID)}),1e4),(0,n.useEffect)((()=>{}),[i]),(0,n.useEffect)((()=>{}),[d]);const E=()=>{w("/patients").then((e=>{a(e)}))},p=e=>{w(`/vitals/${e}`).then((e=>{e.results&&u(e.results)}))},v=e=>{x(`/patients/delete/${e}`,0,{}).then((e=>{E()}))},N=e=>{const t=parseInt(e);m(!0),w(`/patients/${t}`).then((e=>{e.results&&(o(e.results),p(t))}))};return n.createElement("div",{className:"mainframe"},n.createElement("div",{className:"header"},n.createElement("div",{className:"labelHolder"},n.createElement("h2",null,"Tableau de bord")),n.createElement("div",{className:"buttonHolder"},n.createElement("div",{className:"btn",onClick:r},n.createElement("p",null,"Ajouter")))),n.createElement("div",{className:"patientList"},t?t.map(((e,t)=>n.createElement(y,{key:t,patientData:e,deletePatient:v,showPatient:N}))):""),n.createElement("div",{className:"link-holder"},n.createElement("p",null,n.createElement("a",{href:"https://docs.google.com/presentation/d/1Yuvrv6VnN413m8KntJcfW60Uw5WQd7B5XJyjbiaDK_Y/edit?usp=sharing"},"Link to presentation"))),n.createElement(h,{isOpened:l,hide:r,action:e=>{x("/patients/new",0,e).then((e=>{E()}))}}),n.createElement(g,{isOpened:c,hide:()=>{m(),o(null),u(null)},patient:i,vitals:d,action:()=>{console.log("not implemented.")}}))}r.createRoot(document.getElementById("root")).render(n.createElement(O,null))}},e=>{var t=t=>e(e.s=t);e.O(0,[216],(()=>(t(28594),t(35666),t(48734)))),e.O()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,