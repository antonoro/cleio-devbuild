"use strict";(self.webpackChunkfront_cleio=self.webpackChunkfront_cleio||[]).push([[179],{48734:(e,t,a)=>{var l=a(89346),n=a(67294),r=a(20745);const s=()=>{const[e,t]=(0,n.useState)(!1);return[e,function(){t(!e)}]};var c=a(73935);const m=[{label:"M"},{label:"F"},{label:"Autre"}],i=e=>{switch(e){case"bpm":return"bpm";case"skintemp":return"T&deg;";case"spo2":return"SpO<sub>2</sub>";default:return""}},o=/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/,d=e=>{l.td_(".radioOption").classed("selected",!1),l.Ys(e.target).classed("selected",!0)},u=()=>{const e=l.Ys(".selected");return e.node()?"Autre"===e.node().innerText?"A":"M"===e.node().innerText||"F"===e.node().innerText?e.node().innerText:"N/A":null},E=(e,t)=>{let a;e?a=e.target:t&&(a=t);const n=a.value;let r,s=!1;if("name"===a.id||"firstName"===a.id)s=String(n).length>0,r=String(n);else if("age"===a.id){const e=parseInt(String(n));s=!isNaN(e),r=e}else"email"===a.id&&(s=o.test(n),r=n);return l.Ys(a).classed(s?"valid":"error",!0),e?s:t?[s,r,a.id]:void 0},p=e=>{l.Ys(e.target).classed("valid",!1),l.Ys(e.target).classed("error",!1)},v=()=>{const e=l.td_("input").nodes();let t=!0,a={};return e.map((e=>{let l=E(null,e);l[0]?a[`${l[2]}`]=l[1]:t=!1})),u()?a.sex=u():t=!1,a.curVitals={bpm:0,skintemp:0,spo2:0},[t,a]},h=e=>{let{isOpened:t,hide:a,action:l}=e;return t?c.createPortal(n.createElement(n.Fragment,null,n.createElement("div",{className:"modal-overlay"}),n.createElement("div",{className:"modal-wrapper","aria-modal":!0,"aria-hidden":!0,tabIndex:-1,role:"dialog"},n.createElement("div",{className:"modal"},n.createElement("div",{className:"modal-header"},n.createElement("h2",null,"Ajouter un patient")),n.createElement("form",null,n.createElement("div",{className:"form-group"},n.createElement("div",{className:"holder label"},n.createElement("label",null,"Nom")),n.createElement("div",{className:"holder input"},n.createElement("input",{className:"form-control",id:"name",onBlur:e=>{E(e,null)},onInput:p}))),n.createElement("div",{className:"form-group"},n.createElement("div",{className:"holder label"},n.createElement("label",null,"Prénom")),n.createElement("div",{className:"holder input"},n.createElement("input",{className:"form-control",id:"firstName",onBlur:e=>{E(e,null)},onInput:p}))),n.createElement("div",{className:"form-group"},n.createElement("div",{className:"holder label"},n.createElement("label",null,"Âge")),n.createElement("div",{className:"holder input"},n.createElement("input",{className:"form-control",id:"age",onBlur:e=>{E(e,null)},onInput:p}))),n.createElement("div",{className:"form-group"},n.createElement("div",{className:"holder label"},n.createElement("label",null,"Sexe")),n.createElement("div",{className:"holder input"},n.createElement("div",{className:"radioHolder"},m.map(((e,t)=>n.createElement("div",{key:`${e.label}`,className:"radioOption",onClick:d},n.createElement("p",null,e.label))))))),n.createElement("div",{className:"form-group"},n.createElement("div",{className:"holder label"},n.createElement("label",null,"Email")),n.createElement("div",{className:"holder input"},n.createElement("input",{className:"form-control",id:"email",onBlur:e=>{E(e,null)},onInput:p})))),n.createElement("div",{className:"btnArray"},n.createElement("div",{className:"btnHolder"},n.createElement("div",{className:"btn cancel",onClick:a},n.createElement("p",null,"Annuler"))),n.createElement("div",{className:"btnHolder"},n.createElement("div",{className:"btn accept",onClick:()=>{v()[0]&&(l(v()[1]),a())}},n.createElement("p",null,"Confirmer"))))))),document.body):null};var N=a(25935);const f=(e,t,a)=>{let l={};return a.forEach(((a,n)=>{const r=Array.from(t).sort(((t,l)=>{const n=t[1],r=l[1];return e?r[a]-n[a]:n[a]-r[a]}))[0];l[a]=r[1][a]})),[l,e?"Maximum":"Minimum"]},b=(e,t,a)=>{let l;const r=t.slice(0,30);switch(e){case"mean":l=((e,t)=>{let a={};return t.forEach(((t,l)=>{const n=Array.from(e).reduce(((e,a)=>e+a[1][t]),0);a[t]="bpm"===t?parseInt(n/Array.from(e).length):parseFloat(parseFloat(n/Array.from(e).length).toFixed("skintemp"===t?2:3))})),[a,"Moyenne"]})(r,a);break;case"max":l=f(!0,r,a);break;case"min":l=f(!1,r,a)}return n.createElement("tr",{className:"vitalrow"},n.createElement("td",null,l[1]),Object.values(l[0]).map(((e,t)=>n.createElement("td",{key:t},e))))},g=e=>{let{isOpened:t,hide:a,patient:l,vitals:r,action:s}=e;return t?c.createPortal(n.createElement(n.Fragment,null,n.createElement("div",{className:"modal-overlay"}),n.createElement("div",{className:"modal-wrapper","aria-modal":!0,"aria-hidden":!0,tabIndex:-1,role:"dialog"},n.createElement("div",{className:"modal"},n.createElement("div",{className:"x-holder"},n.createElement("img",{onClick:a,src:"assets/img/x.png"})),n.createElement("div",{className:"modal-header"},n.createElement("h2",null,"Visualiser un patient")),l?n.createElement("div",{className:"modal-body"},n.createElement("div",{className:"modal-unit inline"},n.createElement("p",null,l.firstName," "),n.createElement("p",null,n.createElement("b",null,l.name))),n.createElement("div",{className:"modal-unit inline"},n.createElement("p",null,l.age," ans • "),n.createElement("p",null,(e=>{switch(e){case"F":return"Femme";case"M":return"Homme";case"A":return"Autre";default:return"N/A"}})(l.sex))),n.createElement("div",{className:"modal-unit inline"},n.createElement("p",null,n.createElement("a",{href:`mailto:${l.email}`},l.email)))):null,n.createElement("div",{className:"table-holder"},l&&r?n.createElement("table",{className:"vitals-table",cellSpacing:"0"},n.createElement("thead",{className:"vitalheaderrow"},n.createElement("tr",null,n.createElement("th",null),r.headers.map(((e,t)=>n.createElement("th",{key:t},(0,N.ZP)(i(e)))))),n.createElement("tr",null,n.createElement("td",null,n.createElement("h3",null,"Statistiques (5 dernières minutes)")),r.headers.map(((e,t)=>n.createElement("td",{key:t}," ")))),b("mean",Object.entries(r.measurements).reverse(),r.headers),b("max",Object.entries(r.measurements).reverse(),r.headers),b("min",Object.entries(r.measurements).reverse(),r.headers),n.createElement("tr",null,n.createElement("td",null,n.createElement("h3",null,"Données")),r.headers.map(((e,t)=>n.createElement("td",{key:t}," "))))),n.createElement("tbody",{className:"data-holder"},Object.entries(r.measurements).reverse().map(((e,t)=>n.createElement("tr",{className:"vitalrow",key:t},n.createElement("td",null,e[0]),Object.entries(e[1]).map(((e,t)=>n.createElement("td",{key:t},e[1])))))))):null)))),document.body):null};function y(e){const t={name:e.patientData.name,firstName:e.patientData.firstName,age:e.patientData.age,sex:e.patientData.sex,contact:e.patientData.email,patientID:e.patientData.patientID,vitals:e.patientData.curVitals};return n.createElement("div",{className:"patientEntry"},n.createElement("div",{className:"division names"},n.createElement("h4",null,t.name),n.createElement("p",null,t.firstName)),n.createElement("div",{className:"division age"},n.createElement("h5",null,t.age," ans")),n.createElement("div",{className:"division sex"},n.createElement("h5",null,t.sex)),n.createElement("div",{className:"division contact"},n.createElement("h5",null,n.createElement("a",{href:`mailto:${t.contact}`},"Contact"))),n.createElement("div",{className:"division vitals"},Object.entries(t.vitals).map(((e,t)=>n.createElement("div",{key:t,className:"vitalUnit"},n.createElement("p",{className:"type"},(0,N.ZP)(i(e[0]))),n.createElement("h5",{className:"value"},e[1]))))),n.createElement("div",{className:"division eye",onClick:()=>{e.showPatient(t.patientID)}},n.createElement("img",{src:"assets/img/eye.png"})),n.createElement("div",{className:"division delete",onClick:()=>{e.deletePatient(t.patientID)}},n.createElement("img",{src:"assets/img/bin.png"})))}const k="https://cleio-server.herokuapp.com/api";function w(e,t){return fetch(`${k}${e}`,{method:"GET",headers:{Accept:"application/json","Content-Type":"application/json"}}).then((e=>e.json())).then((e=>e)).catch((e=>(console.log("Error sending Get request: ",e),null)))}function x(e,t,a){const l={method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(a)};return fetch(`${k}${e}`,l).then((e=>e.json())).then((e=>e)).catch((e=>(console.log("Error sending Post request:",e),null)))}function O(e){const[t,a]=(0,n.useState)(null),[l,r]=s(),[c,m]=s(),[i,o]=(0,n.useState)(null),[d,u]=(0,n.useState)(null);(0,n.useEffect)((()=>{E()}),[]),function(e,t){const a=(0,n.useRef)();(0,n.useEffect)((()=>{a.current=e}),[e]),(0,n.useEffect)((()=>{{let e=setInterval((function(){a.current()}),t);return()=>clearInterval(e)}}),[t])}((()=>{E(),i&&p(i.patientID)}),1e4),(0,n.useEffect)((()=>{}),[i]),(0,n.useEffect)((()=>{}),[d]);const E=()=>{w("/patients").then((e=>{a(e)}))},p=e=>{w(`/vitals/${e}`).then((e=>{e.results&&u(e.results)}))},v=e=>{x(`/patients/delete/${e}`,0,{}).then((e=>{E()}))},N=e=>{const t=parseInt(e);m(!0),w(`/patients/${t}`).then((e=>{e.results&&(o(e.results),p(t))}))};return n.createElement("div",{className:"mainframe"},n.createElement("div",{className:"header"},n.createElement("div",{className:"labelHolder"},n.createElement("h2",null,"Tableau de bord")),n.createElement("div",{className:"buttonHolder"},n.createElement("div",{className:"btn",onClick:r},n.createElement("p",null,"Ajouter")))),n.createElement("div",{className:"patientList"},t?t.map(((e,t)=>n.createElement(y,{key:t,patientData:e,deletePatient:v,showPatient:N}))):""),n.createElement("div",{className:"link-holder"},n.createElement("p",null,n.createElement("a",{href:"https://docs.google.com/presentation/d/1Yuvrv6VnN413m8KntJcfW60Uw5WQd7B5XJyjbiaDK_Y/edit?usp=sharing"},"Link to presentation"))),n.createElement(h,{isOpened:l,hide:r,action:e=>{x("/patients/new",0,e).then((e=>{E()}))}}),n.createElement(g,{isOpened:c,hide:()=>{m(),o(null),u(null)},patient:i,vitals:d,action:()=>{console.log("not implemented.")}}))}r.createRoot(document.getElementById("root")).render(n.createElement(O,null))}},e=>{var t=t=>e(e.s=t);e.O(0,[216],(()=>(t(28594),t(35666),t(48734)))),e.O()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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SSxFQUNWOUYsS0FBTStGLEVBQ045RixPQTFEUW9ILElBQ2hCOUIsRUxoRGUsZ0JLZ0QyQixFQUFNOEIsR0FDL0NyQyxNQUFLaUMsSUFDRlYsR0FBbUIsR0FDckIsSUF3REVwRyxFQUFBQSxjQUFDbUgsRUFBZ0IsQ0FDYjdKLFNBQVV1SSxFQUNWaEcsS0FBTUEsS0FDRmlHLElBQ0FFLEVBQWtCLE1BQ2xCRSxFQUFxQixLQUFLLEVBRzlCdkQsUUFBU29ELEVBQ1RuRCxPQUFRcUQsRUFDUm5HLE9BQVFBLEtBQU9vRixRQUFRQyxJQUFJLG1CQUFtQixJQUs5RCxDRXRIYXBGLEVBQUFBLFdBQW9CVyxTQUFTMEcsZUFBZSxTQUNwREMsT0FDRHJILEVBQUFBLGNBQUN3RixFQUFTLE0iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udC1jbGVpby8uL3NyYy9hcHAvY29tcG9uZW50cy91c2VNb2RhbC5qcyIsIndlYnBhY2s6Ly9mcm9udC1jbGVpby8uL3NyYy9hcHAvdXRpbGl0aWVzLmpzIiwid2VicGFjazovL2Zyb250LWNsZWlvLy4vc3JjL2FwcC9jb21wb25lbnRzL01vZGFsQWRkUGF0aWVudC5qcyIsIndlYnBhY2s6Ly9mcm9udC1jbGVpby8uL3NyYy9hcHAvY29tcG9uZW50cy9Nb2RhbFZpZXdQYXRpZW50LmpzIiwid2VicGFjazovL2Zyb250LWNsZWlvLy4vc3JjL2FwcC9jb21wb25lbnRzL1BhdGllbnRFbnRyeS5qcyIsIndlYnBhY2s6Ly9mcm9udC1jbGVpby8uL3NyYy9hcHAvcmVxdWVzdGVyLmpzIiwid2VicGFjazovL2Zyb250LWNsZWlvLy4vc3JjL2FwcC9jb21wb25lbnRzL0Rhc2hib2FyZC5qcyIsIndlYnBhY2s6Ly9mcm9udC1jbGVpby8uL3NyYy9hcHAvY29tcG9uZW50cy91c2VJbnRlcnZhbC5qcyIsIndlYnBhY2s6Ly9mcm9udC1jbGVpby8uL3NyYy9hcHAvYXBwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xyXG5cclxuY29uc3QgdXNlTW9kYWwgPSAoKSA9PiB7XHJcbiAgY29uc3QgW2lzT3BlbmVkLCBzZXRPcGVuZWRdID0gdXNlU3RhdGUoZmFsc2UpO1xyXG5cclxuICBmdW5jdGlvbiB0b2dnbGUoKSB7XHJcbiAgICBzZXRPcGVuZWQoIWlzT3BlbmVkKTtcclxuICB9XHJcblxyXG4gIHJldHVybiBbXHJcbiAgICBpc09wZW5lZCxcclxuICAgIHRvZ2dsZVxyXG4gIF1cclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHVzZU1vZGFsOyIsImV4cG9ydCBjb25zdCByb3V0ZXMgPSB7XHJcbiAgICBnZXRBbGxQYXRpZW50czogXCIvcGF0aWVudHNcIixcclxuICAgIGdldFNpbmdsZVBhdGllbnQ6IFwiL3BhdGllbnRzL1wiLFxyXG4gICAgZ2V0Vml0YWxzZm9yUGF0aWVudDogXCIvdml0YWxzL1wiLFxyXG4gICAgcG9zdFNpbmdsZVBhdGllbnQ6IFwiL3BhdGllbnRzL25ld1wiLFxyXG4gICAgZGVsZXRlU2luZ2xlUGF0aWVudDogXCIvcGF0aWVudHMvZGVsZXRlL1wiXHJcbn07XHJcblxyXG5leHBvcnQgY29uc3Qgc2V4T3B0aW9ucyA9IFtcclxuICAgIHtcclxuICAgICAgICBsYWJlbDpcIk1cIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBsYWJlbDpcIkZcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBsYWJlbDpcIkF1dHJlXCJcclxuICAgIH1cclxuXTtcclxuXHJcbmV4cG9ydCBjb25zdCBmb3JtYXRIZWFkZXJzID0gKHZhbHVlKSA9PiB7XHJcbiAgICBzd2l0Y2godmFsdWUpe1xyXG4gICAgICAgIGNhc2UgXCJicG1cIjpcclxuICAgICAgICAgICAgcmV0dXJuIFwiYnBtXCI7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgIGNhc2UgXCJza2ludGVtcFwiOlxyXG4gICAgICAgICAgICByZXR1cm4gYFQkeycmZGVnOyd9YDtcclxuXHJcbiAgICAgICAgY2FzZSBcInNwbzJcIjpcclxuICAgICAgICAgICAgcmV0dXJuIGBTcE88c3ViPjI8L3N1Yj5gO1xyXG5cclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICByZXR1cm4gXCJcIjtcclxuICAgIH1cclxuICAgIFxyXG59IiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgUmVhY3RET00gZnJvbSBcInJlYWN0LWRvbVwiO1xyXG5pbXBvcnQgeyBzZXhPcHRpb25zIH0gZnJvbSBcIi4uL3V0aWxpdGllc1wiO1xyXG5pbXBvcnQgKiBhcyBkMyBmcm9tICdkMyc7XHJcblxyXG5jb25zdCBlbWFpbFJlZ2V4ID0gL15cXHcrKFtcXC4tXT9cXHcrKSpAXFx3KyhbXFwuLV0/XFx3KykqKFxcLlxcd3syLDN9KSskLztcclxuXHJcbmNvbnN0IG9uU2VsZWN0U2V4ID0gKGUpID0+IHtcclxuICAgIGQzLnNlbGVjdEFsbCgnLnJhZGlvT3B0aW9uJykuY2xhc3NlZCgnc2VsZWN0ZWQnLCBmYWxzZSk7XHJcbiAgICBkMy5zZWxlY3QoZS50YXJnZXQpLmNsYXNzZWQoJ3NlbGVjdGVkJywgdHJ1ZSk7XHJcbn1cclxuXHJcbmNvbnN0IGdldFNlbGVjdGVkU2V4ID0gKCkgPT4ge1xyXG4gICAgY29uc3Qgc2VsZWN0ZWRCdG49IGQzLnNlbGVjdCgnLnNlbGVjdGVkJyk7XHJcbiAgICBpZihzZWxlY3RlZEJ0bi5ub2RlKCkpe1xyXG4gICAgICAgIGlmKHNlbGVjdGVkQnRuLm5vZGUoKS5pbm5lclRleHQgPT09IFwiQXV0cmVcIil7XHJcbiAgICAgICAgICAgIHJldHVybiBcIkFcIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZihzZWxlY3RlZEJ0bi5ub2RlKCkuaW5uZXJUZXh0ID09PSBcIk1cIiB8fFxyXG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRCdG4ubm9kZSgpLmlubmVyVGV4dCA9PT0gXCJGXCIpe1xyXG4gICAgICAgICAgICByZXR1cm4gc2VsZWN0ZWRCdG4ubm9kZSgpLmlubmVyVGV4dDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgcmV0dXJuIFwiTi9BXCI7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZXtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxufVxyXG5cclxuY29uc3QgdmVyaWZ5SW5wdXQgPSAoZSwgdGFyZ2V0KSA9PiB7XHJcbiAgICBsZXQgY3VyVGFyZ2V0O1xyXG4gICAgaWYoZSl7XHJcbiAgICAgICAgY3VyVGFyZ2V0ID0gZS50YXJnZXQ7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmKHRhcmdldCl7XHJcbiAgICAgICAgY3VyVGFyZ2V0ID0gdGFyZ2V0O1xyXG4gICAgfVxyXG4gICAgY29uc3QgY3VyVmFsdWUgPSBjdXJUYXJnZXQudmFsdWU7XHJcbiAgICBsZXQgdmVyaWZpZWRTdGF0ZSA9IGZhbHNlO1xyXG4gICAgbGV0IHZhbHVlO1xyXG4gICAgaWYoY3VyVGFyZ2V0LmlkID09PSBcIm5hbWVcIiB8fCBjdXJUYXJnZXQuaWQgPT09IFwiZmlyc3ROYW1lXCIpe1xyXG4gICAgICAgIHZlcmlmaWVkU3RhdGUgPSBTdHJpbmcoY3VyVmFsdWUpLmxlbmd0aCA+IDA7XHJcbiAgICAgICAgdmFsdWUgPSBTdHJpbmcoY3VyVmFsdWUpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZihjdXJUYXJnZXQuaWQgPT09IFwiYWdlXCIpe1xyXG4gICAgICAgIGNvbnN0IG51bSA9IHBhcnNlSW50KFN0cmluZyhjdXJWYWx1ZSkpO1xyXG4gICAgICAgIHZlcmlmaWVkU3RhdGUgPSAhaXNOYU4obnVtKTtcclxuICAgICAgICB2YWx1ZSA9IG51bTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYoY3VyVGFyZ2V0LmlkID09PSBcImVtYWlsXCIpe1xyXG4gICAgICAgIHZlcmlmaWVkU3RhdGUgPSBlbWFpbFJlZ2V4LnRlc3QoY3VyVmFsdWUpO1xyXG4gICAgICAgIHZhbHVlID0gY3VyVmFsdWU7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGQzLnNlbGVjdChjdXJUYXJnZXQpLmNsYXNzZWQoYCR7dmVyaWZpZWRTdGF0ZSA/IFwidmFsaWRcIjpcImVycm9yXCJ9YCwgdHJ1ZSk7XHJcbiAgICBcclxuICAgIGlmKGUpe1xyXG4gICAgICAgIHJldHVybiB2ZXJpZmllZFN0YXRlO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZih0YXJnZXQpe1xyXG4gICAgICAgIHJldHVybiBbdmVyaWZpZWRTdGF0ZSwgdmFsdWUsIGN1clRhcmdldC5pZF07XHJcbiAgICB9XHJcbn1cclxuXHJcbmNvbnN0IHJlc2V0SW5wdXREZWNvcmF0aW9uID0gKGUpID0+IHtcclxuICAgIGQzLnNlbGVjdChlLnRhcmdldCkuY2xhc3NlZCgndmFsaWQnLCBmYWxzZSk7XHJcbiAgICBkMy5zZWxlY3QoZS50YXJnZXQpLmNsYXNzZWQoJ2Vycm9yJywgZmFsc2UpO1xyXG59XHJcblxyXG5jb25zdCB2ZXJpZnlBbGxJbnB1dHMgPSAoKSA9PiB7XHJcbiAgICBcclxuICAgIGNvbnN0IHNlbGVjdGlvbiA9IGQzLnNlbGVjdEFsbCgnaW5wdXQnKS5ub2RlcygpO1xyXG4gICAgbGV0IHZlcmlmaWVkU3RhdGUgPSB0cnVlO1xyXG4gICAgbGV0IHZlcmlmaWVkT2JqID0ge307XHJcbiAgICBzZWxlY3Rpb24ubWFwKG5vZGUgPT4ge1xyXG4gICAgICAgIGxldCBjdXJDaGVja2VkSW5wdXQgPSB2ZXJpZnlJbnB1dChudWxsLCBub2RlKTtcclxuICAgICAgICBpZighY3VyQ2hlY2tlZElucHV0WzBdKXtcclxuICAgICAgICAgICAgdmVyaWZpZWRTdGF0ZSA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICB2ZXJpZmllZE9ialtgJHtjdXJDaGVja2VkSW5wdXRbMl19YF0gPSBjdXJDaGVja2VkSW5wdXRbMV07XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBpZighZ2V0U2VsZWN0ZWRTZXgoKSl7XHJcbiAgICAgICAgdmVyaWZpZWRTdGF0ZSA9IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgZWxzZXtcclxuICAgICAgICB2ZXJpZmllZE9ialtcInNleFwiXSA9IGdldFNlbGVjdGVkU2V4KCk7XHJcbiAgICB9XHJcblxyXG4gICAgdmVyaWZpZWRPYmpbXCJjdXJWaXRhbHNcIl0gPSB7XHJcbiAgICAgICAgYnBtOiAwLFxyXG4gICAgICAgIHNraW50ZW1wOiAwLFxyXG4gICAgICAgIHNwbzI6IDBcclxuICAgIH07XHJcbiAgICByZXR1cm4gW3ZlcmlmaWVkU3RhdGUsIHZlcmlmaWVkT2JqXTtcclxufVxyXG5cclxuY29uc3QgTW9kYWxBZGRQYXRpZW50ID0gKHsgaXNPcGVuZWQsIGhpZGUsIGFjdGlvbiB9KSA9PiBpc09wZW5lZCA/IFJlYWN0RE9NLmNyZWF0ZVBvcnRhbChcclxuICAgIFxyXG4gICAgPFJlYWN0LkZyYWdtZW50PlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibW9kYWwtb3ZlcmxheVwiLz5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1vZGFsLXdyYXBwZXJcIiBhcmlhLW1vZGFsIGFyaWEtaGlkZGVuIHRhYkluZGV4PXstMX0gcm9sZT1cImRpYWxvZ1wiPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1vZGFsXCI+XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibW9kYWwtaGVhZGVyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGgyPkFqb3V0ZXIgdW4gcGF0aWVudDwvaDI+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxmb3JtPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZm9ybS1ncm91cFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvbGRlciBsYWJlbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsPk5vbTwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvbGRlciBpbnB1dFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzTmFtZT1cImZvcm0tY29udHJvbFwiIGlkPVwibmFtZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25CbHVyPXsoZSkgPT4ge3ZlcmlmeUlucHV0KGUsbnVsbCl9fSBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbklucHV0PXtyZXNldElucHV0RGVjb3JhdGlvbn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZm9ybS1ncm91cFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvbGRlciBsYWJlbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsPlByw6lub208L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob2xkZXIgaW5wdXRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzc05hbWU9XCJmb3JtLWNvbnRyb2xcIiBpZD1cImZpcnN0TmFtZVwiIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQmx1cj17KGUpID0+IHt2ZXJpZnlJbnB1dChlLG51bGwpfX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbklucHV0PXtyZXNldElucHV0RGVjb3JhdGlvbn0vPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZvcm0tZ3JvdXBcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob2xkZXIgbGFiZWxcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbD7DgmdlPC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9sZGVyIGlucHV0XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3NOYW1lPVwiZm9ybS1jb250cm9sXCIgaWQ9XCJhZ2VcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQmx1cj17KGUpID0+IHt2ZXJpZnlJbnB1dChlLG51bGwpfX0gXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25JbnB1dD17cmVzZXRJbnB1dERlY29yYXRpb259XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZvcm0tZ3JvdXBcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob2xkZXIgbGFiZWxcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbD5TZXhlPC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9sZGVyIGlucHV0XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJhZGlvSG9sZGVyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNleE9wdGlvbnMubWFwKChvcHRpb24sIGNvdW50KSA9PiBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBrZXk9e2Ake29wdGlvbi5sYWJlbH1gfSBjbGFzc05hbWU9XCJyYWRpb09wdGlvblwiIG9uQ2xpY2s9e29uU2VsZWN0U2V4fT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD57b3B0aW9uLmxhYmVsfTwvcD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZvcm0tZ3JvdXBcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob2xkZXIgbGFiZWxcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbD5FbWFpbDwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvbGRlciBpbnB1dFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzTmFtZT1cImZvcm0tY29udHJvbFwiIGlkPVwiZW1haWxcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQmx1cj17KGUpID0+IHt2ZXJpZnlJbnB1dChlLG51bGwpfX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbklucHV0PXtyZXNldElucHV0RGVjb3JhdGlvbn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9mb3JtPlxyXG5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYnRuQXJyYXlcIj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJ0bkhvbGRlclwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJ0biBjYW5jZWxcIiBvbkNsaWNrPXtoaWRlfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPkFubnVsZXI8L3A+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYnRuSG9sZGVyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYnRuIGFjY2VwdFwiIG9uQ2xpY2s9e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHZlcmlmeUFsbElucHV0cygpWzBdKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uKHZlcmlmeUFsbElucHV0cygpWzFdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5Db25maXJtZXI8L3A+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgPC9SZWFjdC5GcmFnbWVudD4sIGRvY3VtZW50LmJvZHlcclxuXHJcbilcclxuOlxyXG5udWxsO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgTW9kYWxBZGRQYXRpZW50O1xyXG5cclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgUmVhY3RET00gZnJvbSBcInJlYWN0LWRvbVwiO1xyXG5pbXBvcnQgcGFyc2UgZnJvbSAnaHRtbC1yZWFjdC1wYXJzZXInO1xyXG5pbXBvcnQgeyBmb3JtYXRIZWFkZXJzIH0gZnJvbSBcIi4uL3V0aWxpdGllc1wiO1xyXG5cclxuY29uc3QgZm9ybWF0U2V4ID0gKHNleCkgPT4ge1xyXG4gICAgc3dpdGNoKHNleCl7XHJcbiAgICAgICAgY2FzZSBcIkZcIjpcclxuICAgICAgICAgICAgcmV0dXJuIFwiRmVtbWVcIjtcclxuICAgICAgICBjYXNlIFwiTVwiOlxyXG4gICAgICAgICAgICByZXR1cm4gXCJIb21tZVwiO1xyXG4gICAgICAgIGNhc2UgXCJBXCI6XHJcbiAgICAgICAgICAgIHJldHVybiBcIkF1dHJlXCI7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgcmV0dXJuIFwiTi9BXCI7XHJcbiAgICB9XHJcbn1cclxuXHJcbmNvbnN0IGNhbGN1bGF0ZU1lYW4gPSAoZGF0YSwgdml0YWxIZWFkZXJzKSA9PiB7XHJcbiAgICBcclxuICAgIGxldCBzdW1tZWREYXRhID0ge307XHJcblxyXG4gICAgdml0YWxIZWFkZXJzLmZvckVhY2goKHZpdGFsSGVhZGVyLCBjb3VudCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHN1bW1lZFZhbHVlID0gQXJyYXkuZnJvbShkYXRhKS5yZWR1Y2UoKGFjYywgY3VyVmFsKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBhY2MgKyBjdXJWYWxbMV1bdml0YWxIZWFkZXJdO1xyXG4gICAgICAgIH0sIDApO1xyXG4gICAgICAgIGlmKHZpdGFsSGVhZGVyID09PSBcImJwbVwiKXtcclxuICAgICAgICAgICAgc3VtbWVkRGF0YVt2aXRhbEhlYWRlcl0gPSBwYXJzZUludChzdW1tZWRWYWx1ZSAvIEFycmF5LmZyb20oZGF0YSkubGVuZ3RoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgc3VtbWVkRGF0YVt2aXRhbEhlYWRlcl0gPSBwYXJzZUZsb2F0KHBhcnNlRmxvYXQoc3VtbWVkVmFsdWUgLyBBcnJheS5mcm9tKGRhdGEpLmxlbmd0aCkudG9GaXhlZCh2aXRhbEhlYWRlciA9PT0gXCJza2ludGVtcFwiID8gMiA6IDMpKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gW3N1bW1lZERhdGEsIFwiTW95ZW5uZVwiXTtcclxufVxyXG5cclxuY29uc3QgY2FsY3VsYXRlTWF4TWluID0gKGlzTWF4LCBkYXRhLCB2aXRhbEhlYWRlcnMpID0+IHtcclxuICAgIGxldCBmaW5hbEFycmF5ID0ge307XHJcbiAgICBcclxuICAgIHZpdGFsSGVhZGVycy5mb3JFYWNoKCh2aXRhbEhlYWRlciwgY291bnQpID0+IHtcclxuICAgICAgICBjb25zdCBzb3J0ZWRNYXggPSBBcnJheS5mcm9tKGRhdGEpLnNvcnQoKGEsYikgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBjdXJBID0gYVsxXTtcclxuICAgICAgICAgICAgY29uc3QgY3VyQiA9IGJbMV07XHJcbiAgICAgICAgICAgIGlmKGlzTWF4KSBcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGN1ckJbdml0YWxIZWFkZXJdIC0gY3VyQVt2aXRhbEhlYWRlcl07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGN1ckFbdml0YWxIZWFkZXJdIC0gY3VyQlt2aXRhbEhlYWRlcl07XHJcbiAgICAgICAgfSlbMF07XHJcbiAgICAgICAgZmluYWxBcnJheVt2aXRhbEhlYWRlcl0gPSBzb3J0ZWRNYXhbMV1bdml0YWxIZWFkZXJdO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIFtmaW5hbEFycmF5LCBpc01heCA/IFwiTWF4aW11bVwiIDogXCJNaW5pbXVtXCJdO1xyXG59XHJcblxyXG5jb25zdCBjYWxjdWxhdGVTdGF0cyA9ICh0eXBlLCBkYXRhLCB2aXRhbEhlYWRlcnMpID0+IHtcclxuICAgIGxldCBjYWxjdWxhdGlvbnM7XHJcbiAgICBjb25zdCBzbGljZURhdGEgPSBkYXRhLnNsaWNlKDAsIDMwKTsgLy8gMzAgZmlyc3QgZGF0YSBwb2ludHMgPSA1IG1pbnV0ZXNcclxuICAgIHN3aXRjaCh0eXBlKXtcclxuICAgICAgICBjYXNlIFwibWVhblwiOlxyXG4gICAgICAgICAgICBjYWxjdWxhdGlvbnMgPSBjYWxjdWxhdGVNZWFuKHNsaWNlRGF0YSwgdml0YWxIZWFkZXJzKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBcIm1heFwiOlxyXG4gICAgICAgICAgICBjYWxjdWxhdGlvbnMgPSBjYWxjdWxhdGVNYXhNaW4odHJ1ZSwgc2xpY2VEYXRhLCB2aXRhbEhlYWRlcnMpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIFwibWluXCI6XHJcbiAgICAgICAgICAgIGNhbGN1bGF0aW9ucyA9IGNhbGN1bGF0ZU1heE1pbihmYWxzZSwgc2xpY2VEYXRhLCB2aXRhbEhlYWRlcnMpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDx0ciBjbGFzc05hbWU9XCJ2aXRhbHJvd1wiPlxyXG4gICAgICAgICAgICA8dGQ+e2NhbGN1bGF0aW9uc1sxXX08L3RkPlxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBPYmplY3QudmFsdWVzKGNhbGN1bGF0aW9uc1swXSkubWFwKCh2YWx1ZSxpZHgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQga2V5PXtpZHh9Pnt2YWx1ZX08L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICA8L3RyPlxyXG4gICAgKVxyXG59XHJcblxyXG5jb25zdCBNb2RhbFZpZXdQYXRpZW50ID0gKHsgaXNPcGVuZWQsIGhpZGUsIHBhdGllbnQsIHZpdGFscywgYWN0aW9uIH0pID0+IGlzT3BlbmVkID8gUmVhY3RET00uY3JlYXRlUG9ydGFsKFxyXG5cclxuICAgIDxSZWFjdC5GcmFnbWVudD5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1vZGFsLW92ZXJsYXlcIi8+XHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtb2RhbC13cmFwcGVyXCIgYXJpYS1tb2RhbCBhcmlhLWhpZGRlbiB0YWJJbmRleD17LTF9IHJvbGU9XCJkaWFsb2dcIj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtb2RhbFwiPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ4LWhvbGRlclwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxpbWcgb25DbGljaz17aGlkZX0gXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNyYz1cImFzc2V0cy9pbWcveC5wbmdcIlxyXG4gICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibW9kYWwtaGVhZGVyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGgyPlZpc3VhbGlzZXIgdW4gcGF0aWVudDwvaDI+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHBhdGllbnQgPyBcclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1vZGFsLWJvZHlcIj4gICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1vZGFsLXVuaXQgaW5saW5lXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD57cGF0aWVudC5maXJzdE5hbWV9Jm5ic3A7PC9wPjxwPjxiPntwYXRpZW50Lm5hbWV9PC9iPjwvcD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibW9kYWwtdW5pdCBpbmxpbmVcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPntwYXRpZW50LmFnZX0gYW5zJm5ic3A7JiM4MjI2OyZuYnNwOzwvcD48cD57Zm9ybWF0U2V4KHBhdGllbnQuc2V4KX08L3A+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1vZGFsLXVuaXQgaW5saW5lXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD48YSBocmVmPXtgbWFpbHRvOiR7cGF0aWVudC5lbWFpbH1gfT57cGF0aWVudC5lbWFpbH08L2E+PC9wPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA6IFxyXG4gICAgICAgICAgICAgICAgICAgIG51bGxcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGFibGUtaG9sZGVyXCI+ICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHBhdGllbnQgJiYgdml0YWxzP1xyXG4gICAgICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzc05hbWU9XCJ2aXRhbHMtdGFibGVcIiBjZWxsU3BhY2luZz1cIjBcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRoZWFkIGNsYXNzTmFtZT1cInZpdGFsaGVhZGVycm93XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPjwvdGg+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aXRhbHMuaGVhZGVycy5tYXAoKHZpdGFsSGVhZGVyLCBjb3VudCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGgga2V5PXtjb3VudH0+e3BhcnNlKGZvcm1hdEhlYWRlcnModml0YWxIZWFkZXIpKX08L3RoPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjxoMz5TdGF0aXN0aXF1ZXMgKDUgZGVybmnDqHJlcyBtaW51dGVzKTwvaDM+PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpdGFscy5oZWFkZXJzLm1hcCgodml0YWxIZWFkZXIsIGNvdW50KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBrZXk9e2NvdW50fT4mbmJzcDs8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsY3VsYXRlU3RhdHMoXCJtZWFuXCIsT2JqZWN0LmVudHJpZXModml0YWxzLm1lYXN1cmVtZW50cykucmV2ZXJzZSgpLCB2aXRhbHMuaGVhZGVycylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxjdWxhdGVTdGF0cyhcIm1heFwiLCBPYmplY3QuZW50cmllcyh2aXRhbHMubWVhc3VyZW1lbnRzKS5yZXZlcnNlKCksIHZpdGFscy5oZWFkZXJzKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGN1bGF0ZVN0YXRzKFwibWluXCIsIE9iamVjdC5lbnRyaWVzKHZpdGFscy5tZWFzdXJlbWVudHMpLnJldmVyc2UoKSwgdml0YWxzLmhlYWRlcnMpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjxoMz5Eb25uw6llczwvaDM+PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpdGFscy5oZWFkZXJzLm1hcCgodml0YWxIZWFkZXIsIGNvdW50KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBrZXk9e2NvdW50fT4mbmJzcDs8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0Ym9keSBjbGFzc05hbWU9XCJkYXRhLWhvbGRlclwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmVudHJpZXModml0YWxzLm1lYXN1cmVtZW50cykucmV2ZXJzZSgpLm1hcCgobWVhc3VyZW1lbnQsY291bnQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzc05hbWU9XCJ2aXRhbHJvd1wiIGtleT17Y291bnR9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD57bWVhc3VyZW1lbnRbMF19PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5lbnRyaWVzKG1lYXN1cmVtZW50WzFdKS5tYXAoKG1lYXN1cmVtZW50VmFsdWUsIGlkeCkgPT57XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGtleT17aWR4fT57bWVhc3VyZW1lbnRWYWx1ZVsxXX08L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvdGFibGU+XHJcbiAgICAgICAgICAgICAgICAgICAgOlxyXG4gICAgICAgICAgICAgICAgICAgIG51bGxcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgIDwvUmVhY3QuRnJhZ21lbnQ+LCBkb2N1bWVudC5ib2R5XHJcbilcclxuOlxyXG5udWxsO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgTW9kYWxWaWV3UGF0aWVudDsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgcGFyc2UgZnJvbSBcImh0bWwtcmVhY3QtcGFyc2VyXCI7XHJcbmltcG9ydCB7IGZvcm1hdEhlYWRlcnMgfSBmcm9tICcuLi91dGlsaXRpZXMnO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIFBhdGllbnRFbnRyeSAocHJvcHMpIHtcclxuXHJcbiAgICBjb25zdCBwYXRpZW50SW5mbyA9IHtcclxuICAgICAgICBuYW1lOiBwcm9wcy5wYXRpZW50RGF0YS5uYW1lLFxyXG4gICAgICAgIGZpcnN0TmFtZTogcHJvcHMucGF0aWVudERhdGEuZmlyc3ROYW1lLFxyXG4gICAgICAgIGFnZTogcHJvcHMucGF0aWVudERhdGEuYWdlLFxyXG4gICAgICAgIHNleDogcHJvcHMucGF0aWVudERhdGEuc2V4LFxyXG4gICAgICAgIGNvbnRhY3Q6IHByb3BzLnBhdGllbnREYXRhLmVtYWlsLFxyXG4gICAgICAgIHBhdGllbnRJRDogcHJvcHMucGF0aWVudERhdGEucGF0aWVudElELFxyXG4gICAgICAgIHZpdGFsczogcHJvcHMucGF0aWVudERhdGEuY3VyVml0YWxzXHJcbiAgICB9XHJcblxyXG4gICAgLy8gTm90ZTogbW9zdCBwYXRpZW50cyB3aWxsIGhhdmUgdGhlIHNhbWUgdHlwZXMgb2Ygdml0YWwgc2lnbnMsIGJ1dCBzb21lIGNvdWxkIGhhdmUgXHJcbiAgICAvLyBzbGlnaHRseSBkaWZmZXJlbnQgYW5kIG1vcmUgYWR2YW5jZWQgZmVhdHVyZXMgdG8gZGlzcGxheS4gSXQgd291bGQgYmUgbmljZSB0byBtYWtlXHJcbiAgICAvLyB0aGlzIHRhYmxlIGZ1bGx5IGNvbXBhdGlibGUgd2l0aCBhbGwgZGF0YSB0eXBlcywgd2l0aG91dCBtYWtpbmcgdGhlIFVJIHRvb1xyXG4gICAgLy8gY29tcGxpY2F0ZWQgb3IgY3Jvd2RlZC5cclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicGF0aWVudEVudHJ5XCI+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdkaXZpc2lvbiBuYW1lcyc+XHJcbiAgICAgICAgICAgICAgICA8aDQ+e3BhdGllbnRJbmZvLm5hbWV9PC9oND5cclxuICAgICAgICAgICAgICAgIDxwPntwYXRpZW50SW5mby5maXJzdE5hbWV9PC9wPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2RpdmlzaW9uIGFnZSc+XHJcbiAgICAgICAgICAgICAgICA8aDU+e3BhdGllbnRJbmZvLmFnZX0gYW5zPC9oNT5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdkaXZpc2lvbiBzZXgnPlxyXG4gICAgICAgICAgICAgICAgPGg1PntwYXRpZW50SW5mby5zZXh9PC9oNT5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdkaXZpc2lvbiBjb250YWN0Jz5cclxuICAgICAgICAgICAgICAgIDxoNT48YSBocmVmPXtgbWFpbHRvOiR7cGF0aWVudEluZm8uY29udGFjdH1gfT5Db250YWN0PC9hPjwvaDU+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nZGl2aXNpb24gdml0YWxzJz5cclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBPYmplY3QuZW50cmllcyhwYXRpZW50SW5mby52aXRhbHMpLm1hcCgoZWxlbSxjb3VudCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYga2V5PXtjb3VudH0gY2xhc3NOYW1lPSd2aXRhbFVuaXQnPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT0ndHlwZSc+e3BhcnNlKGZvcm1hdEhlYWRlcnMoZWxlbVswXSkpfTwvcD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDUgY2xhc3NOYW1lPSd2YWx1ZSc+e2VsZW1bMV19PC9oNT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdkaXZpc2lvbiBleWUnIG9uQ2xpY2s9eyAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3BzLnNob3dQYXRpZW50KHBhdGllbnRJbmZvLnBhdGllbnRJRClcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9PlxyXG4gICAgICAgICAgICAgICAgPGltZyBcclxuICAgICAgICAgICAgICAgICAgICBzcmM9J2Fzc2V0cy9pbWcvZXllLnBuZydcclxuICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nZGl2aXNpb24gZGVsZXRlJyBvbkNsaWNrPXsoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3BzLmRlbGV0ZVBhdGllbnQocGF0aWVudEluZm8ucGF0aWVudElEKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9PlxyXG4gICAgICAgICAgICAgICAgPGltZyBcclxuICAgICAgICAgICAgICAgICAgICBzcmM9J2Fzc2V0cy9pbWcvYmluLnBuZydcclxuICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgKVxyXG59IiwiaW1wb3J0ICogYXMgZDMgZnJvbSAnZDMnO1xyXG5cclxuY29uc3QgVVJMID0gXCJodHRwczovL2NsZWlvLXNlcnZlci5oZXJva3VhcHAuY29tL2FwaVwiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNlbmRHZXRSZXF1ZXN0KHJvdXRlLCBwYXJhbXMpe1xyXG5cclxuICAgIGNvbnN0IGN1clBhcmFtcyA9IHtcclxuICAgICAgICBtZXRob2Q6IFwiR0VUXCIsXHJcbiAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24nLFxyXG4gICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gZmV0Y2goYCR7VVJMfSR7cm91dGV9YCwgY3VyUGFyYW1zKVxyXG4gICAgICAgIC50aGVuKHJlc3AgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzcC5qc29uKCk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAudGhlbihyZXN1bHQgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmNhdGNoKGUgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnRXJyb3Igc2VuZGluZyBHZXQgcmVxdWVzdDogJywgZSk7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH0pXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzZW5kUG9zdFJlcXVlc3Qocm91dGUscGFyYW1zLGJvZHkpe1xyXG4gICAgY29uc3QgY3VyUGFyYW1zID0ge1xyXG4gICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXHJcbiAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24nLFxyXG4gICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXHJcbiAgICAgICAgfSxcclxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShib2R5KVxyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gZmV0Y2goYCR7VVJMfSR7cm91dGV9YCwgY3VyUGFyYW1zKVxyXG4gICAgICAgIC50aGVuKHJlc3AgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzcC5qc29uKCk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAudGhlbihyZXN1bHQgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmNhdGNoKGUgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnRXJyb3Igc2VuZGluZyBQb3N0IHJlcXVlc3Q6JyxlKTtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfSlcclxufSIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB1c2VNb2RhbCBmcm9tIFwiLi91c2VNb2RhbFwiO1xyXG5pbXBvcnQgeyB1c2VJbnRlcnZhbCB9IGZyb20gXCIuL3VzZUludGVydmFsXCI7XHJcbmltcG9ydCBNb2RhbEFkZFBhdGllbnQgZnJvbSBcIi4vTW9kYWxBZGRQYXRpZW50XCI7XHJcbmltcG9ydCBNb2RhbFZpZXdQYXRpZW50IGZyb20gXCIuL01vZGFsVmlld1BhdGllbnRcIjtcclxuaW1wb3J0IHsgUGF0aWVudEVudHJ5IH0gZnJvbSBcIi4vUGF0aWVudEVudHJ5XCI7XHJcbmltcG9ydCB7IHNlbmRHZXRSZXF1ZXN0LCBzZW5kUG9zdFJlcXVlc3QgfSBmcm9tIFwiLi4vcmVxdWVzdGVyXCI7XHJcbmltcG9ydCB7IHJvdXRlcyB9IGZyb20gXCIuLi91dGlsaXRpZXNcIjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBEYXNoYm9hcmQocHJvcHMpe1xyXG5cclxuICAgIGNvbnN0IFtsaXN0ZWRQYXRpZW50cywgc2V0TGlzdGVkUGF0aWVudHNdID0gdXNlU3RhdGUobnVsbCk7XHJcbiAgICBjb25zdCBbbmV3UGF0aWVudE9wZW5lZCwgc2V0TW9kYWxOZXdQYXRpZW50XSA9IHVzZU1vZGFsKCk7XHJcbiAgICBjb25zdCBbdmlld1BhdGllbnRPcGVuZWQsIHNldE1vZGFsVmlld1BhdGllbnRdID0gdXNlTW9kYWwoKTtcclxuICAgIGNvbnN0IFt2aWV3UGF0aWVudE9iaiwgc2V0Vmlld1BhdGllbnRPYmpdID0gdXNlU3RhdGUobnVsbCk7XHJcbiAgICBjb25zdCBbdmlld1BhdGllbnRWaXRhbHMsIHNldFZpZXdQYXRpZW50Vml0YWxzXSA9IHVzZVN0YXRlKG51bGwpO1xyXG5cclxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgdXBkYXRlUGF0aWVudExpc3QoKTtcclxuICAgIH0sIFtdKTtcclxuXHJcbiAgICB1c2VJbnRlcnZhbCgoKSA9PiB7XHJcbiAgICAgICAgdXBkYXRlUGF0aWVudExpc3QoKTtcclxuICAgICAgICBpZih2aWV3UGF0aWVudE9iail7XHJcbiAgICAgICAgICAgIHVwZGF0ZVZpZXdlZFBhdGllbnRWaXRhbHModmlld1BhdGllbnRPYmoucGF0aWVudElEKTtcclxuICAgICAgICB9XHJcbiAgICB9LCAxMDAwMClcclxuXHJcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgIFxyXG4gICAgfSwgW3ZpZXdQYXRpZW50T2JqXSlcclxuXHJcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgfSwgW3ZpZXdQYXRpZW50Vml0YWxzXSlcclxuXHJcbiAgICBjb25zdCB1cGRhdGVQYXRpZW50TGlzdCA9ICgpID0+IHtcclxuICAgICAgICBzZW5kR2V0UmVxdWVzdChyb3V0ZXMuZ2V0QWxsUGF0aWVudHMpXHJcbiAgICAgICAgLnRoZW4ocmVzID0+IHtcclxuICAgICAgICAgICAgc2V0TGlzdGVkUGF0aWVudHMocmVzKTtcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHVwZGF0ZVZpZXdlZFBhdGllbnRWaXRhbHMgPSAoaWQpID0+IHtcclxuICAgICAgICBzZW5kR2V0UmVxdWVzdChgJHtyb3V0ZXMuZ2V0Vml0YWxzZm9yUGF0aWVudH0ke2lkfWAsIG51bGwpXHJcbiAgICAgICAgLnRoZW4ocmUgPT4ge1xyXG4gICAgICAgICAgICBpZihyZS5yZXN1bHRzKXtcclxuICAgICAgICAgICAgICAgIHNldFZpZXdQYXRpZW50Vml0YWxzKHJlLnJlc3VsdHMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBhZGRQYXRpZW50ID0gKG9iaikgPT4ge1xyXG4gICAgICAgIHNlbmRQb3N0UmVxdWVzdChyb3V0ZXMucG9zdFNpbmdsZVBhdGllbnQsIG51bGwsIG9iailcclxuICAgICAgICAudGhlbihyZXMgPT4ge1xyXG4gICAgICAgICAgICB1cGRhdGVQYXRpZW50TGlzdCgpO1xyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgZGVsZXRlUGF0aWVudCA9IChpZCkgPT4ge1xyXG4gICAgICAgIHNlbmRQb3N0UmVxdWVzdChgJHtyb3V0ZXMuZGVsZXRlU2luZ2xlUGF0aWVudH0ke2lkfWAsIG51bGwsIHt9KVxyXG4gICAgICAgICAgICAudGhlbihyZXMgPT4ge1xyXG4gICAgICAgICAgICAgICAgdXBkYXRlUGF0aWVudExpc3QoKTtcclxuICAgICAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBzaG93UGF0aWVudCA9IChpZCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHBhdGllbnRJRCA9IHBhcnNlSW50KGlkKTtcclxuICAgICAgICBzZXRNb2RhbFZpZXdQYXRpZW50KHRydWUpO1xyXG4gICAgICAgIHNlbmRHZXRSZXF1ZXN0KGAke3JvdXRlcy5nZXRTaW5nbGVQYXRpZW50fSR7cGF0aWVudElEfWAsIG51bGwpXHJcbiAgICAgICAgICAgIC50aGVuKHJlcyA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZihyZXMucmVzdWx0cyl7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0Vmlld1BhdGllbnRPYmoocmVzLnJlc3VsdHMpO1xyXG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZVZpZXdlZFBhdGllbnRWaXRhbHMocGF0aWVudElEKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybihcclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1haW5mcmFtZVwiPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhlYWRlclwiPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJsYWJlbEhvbGRlclwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxoMj5UYWJsZWF1IGRlIGJvcmQ8L2gyPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJ1dHRvbkhvbGRlclwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYnRuXCIgb25DbGljaz17c2V0TW9kYWxOZXdQYXRpZW50fT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHA+QWpvdXRlcjwvcD5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwYXRpZW50TGlzdFwiPlxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGxpc3RlZFBhdGllbnRzID8gXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpc3RlZFBhdGllbnRzLm1hcCgoZWxlbSxjb3VudCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDxQYXRpZW50RW50cnkga2V5PXtjb3VudH0gXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdGllbnREYXRhPXtlbGVtfSBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlUGF0aWVudD17ZGVsZXRlUGF0aWVudH0gXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3dQYXRpZW50PXtzaG93UGF0aWVudH0vPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibGluay1ob2xkZXJcIj5cclxuICAgICAgICAgICAgICAgIDxwPjxhIGhyZWY9XCJodHRwczovL2RvY3MuZ29vZ2xlLmNvbS9wcmVzZW50YXRpb24vZC8xWXV2cnY2Vm5ONDEzbThLbnRKY2ZXNjBVdzVXUWQ3QjVYSnlqYmlhREtfWS9lZGl0P3VzcD1zaGFyaW5nXCI+TGluayB0byBwcmVzZW50YXRpb248L2E+PC9wPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPE1vZGFsQWRkUGF0aWVudCBcclxuICAgICAgICAgICAgICAgIGlzT3BlbmVkPXtuZXdQYXRpZW50T3BlbmVkfVxyXG4gICAgICAgICAgICAgICAgaGlkZT17c2V0TW9kYWxOZXdQYXRpZW50fVxyXG4gICAgICAgICAgICAgICAgYWN0aW9uPXthZGRQYXRpZW50fVxyXG4gICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICA8TW9kYWxWaWV3UGF0aWVudCBcclxuICAgICAgICAgICAgICAgIGlzT3BlbmVkPXt2aWV3UGF0aWVudE9wZW5lZH1cclxuICAgICAgICAgICAgICAgIGhpZGU9eygpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBzZXRNb2RhbFZpZXdQYXRpZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0Vmlld1BhdGllbnRPYmoobnVsbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0Vmlld1BhdGllbnRWaXRhbHMobnVsbCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBwYXRpZW50PXt2aWV3UGF0aWVudE9ian1cclxuICAgICAgICAgICAgICAgIHZpdGFscz17dmlld1BhdGllbnRWaXRhbHN9XHJcbiAgICAgICAgICAgICAgICBhY3Rpb249eygpID0+IHtjb25zb2xlLmxvZygnbm90IGltcGxlbWVudGVkLicpfX1cclxuICAgICAgICAgICAgLz5cclxuICAgICAgICA8L2Rpdj5cclxuICAgIClcclxuXHJcbn0iLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCwgdXNlUmVmIH0gZnJvbSBcInJlYWN0XCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdXNlSW50ZXJ2YWwoY2FsbGJhY2ssIGRlbGF5KXtcclxuXHJcbiAgICBjb25zdCBzYXZlZENCID0gdXNlUmVmKCk7XHJcblxyXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgICAgICBzYXZlZENCLmN1cnJlbnQgPSBjYWxsYmFjaztcclxuICAgIH0sIFtjYWxsYmFja10pO1xyXG5cclxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgZnVuY3Rpb24gdGljaygpe1xyXG4gICAgICAgICAgICBzYXZlZENCLmN1cnJlbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYoZGVsYXkgIT09IG51bGwpe1xyXG4gICAgICAgICAgICBsZXQgaWQgPSBzZXRJbnRlcnZhbCh0aWNrLCBkZWxheSk7XHJcbiAgICAgICAgICAgIHJldHVybiAoKSA9PiBjbGVhckludGVydmFsKGlkKTtcclxuICAgICAgICB9XHJcbiAgICB9LCBbZGVsYXldKTtcclxuXHJcbn0iLCIndXNlIHN0cmljdCc7XHJcblxyXG5pbXBvcnQgJy4uL2Fzc2V0cy9zdHlsZXMvc3R5bGUuc2Nzcyc7XHJcbmltcG9ydCAqIGFzIGQzIGZyb20gJ2QzJztcclxuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgUmVhY3RET00gZnJvbSBcInJlYWN0LWRvbS9jbGllbnRcIjtcclxuaW1wb3J0IHsgRGFzaGJvYXJkIH0gZnJvbSAnLi9jb21wb25lbnRzL0Rhc2hib2FyZCc7XHJcblxyXG5jb25zdCByb290ID0gUmVhY3RET00uY3JlYXRlUm9vdChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJvb3RcIikpO1xyXG5yb290LnJlbmRlcihcclxuICAgIDxEYXNoYm9hcmQgLz5cclxuKVxyXG5cclxuIl0sIm5hbWVzIjpbInVzZU1vZGFsIiwiaXNPcGVuZWQiLCJzZXRPcGVuZWQiLCJ1c2VTdGF0ZSIsInNleE9wdGlvbnMiLCJsYWJlbCIsImZvcm1hdEhlYWRlcnMiLCJ2YWx1ZSIsImVtYWlsUmVnZXgiLCJvblNlbGVjdFNleCIsImUiLCJkMyIsImNsYXNzZWQiLCJ0YXJnZXQiLCJnZXRTZWxlY3RlZFNleCIsInNlbGVjdGVkQnRuIiwibm9kZSIsImlubmVyVGV4dCIsInZlcmlmeUlucHV0IiwiY3VyVGFyZ2V0IiwiY3VyVmFsdWUiLCJ2ZXJpZmllZFN0YXRlIiwiaWQiLCJTdHJpbmciLCJsZW5ndGgiLCJudW0iLCJwYXJzZUludCIsImlzTmFOIiwidGVzdCIsInJlc2V0SW5wdXREZWNvcmF0aW9uIiwidmVyaWZ5QWxsSW5wdXRzIiwic2VsZWN0aW9uIiwibm9kZXMiLCJ2ZXJpZmllZE9iaiIsIm1hcCIsImN1ckNoZWNrZWRJbnB1dCIsImJwbSIsInNraW50ZW1wIiwic3BvMiIsIl9yZWYiLCJoaWRlIiwiYWN0aW9uIiwiUmVhY3RET00iLCJSZWFjdCIsImNsYXNzTmFtZSIsInRhYkluZGV4Iiwicm9sZSIsIm9uQmx1ciIsIm9uSW5wdXQiLCJvcHRpb24iLCJjb3VudCIsImtleSIsIm9uQ2xpY2siLCJkb2N1bWVudCIsImJvZHkiLCJjYWxjdWxhdGVNYXhNaW4iLCJpc01heCIsImRhdGEiLCJ2aXRhbEhlYWRlcnMiLCJmaW5hbEFycmF5IiwiZm9yRWFjaCIsInZpdGFsSGVhZGVyIiwic29ydGVkTWF4IiwiQXJyYXkiLCJmcm9tIiwic29ydCIsImEiLCJiIiwiY3VyQSIsImN1ckIiLCJjYWxjdWxhdGVTdGF0cyIsInR5cGUiLCJjYWxjdWxhdGlvbnMiLCJzbGljZURhdGEiLCJzbGljZSIsImNhbGN1bGF0ZU1lYW4iLCJzdW1tZWREYXRhIiwic3VtbWVkVmFsdWUiLCJyZWR1Y2UiLCJhY2MiLCJjdXJWYWwiLCJwYXJzZUZsb2F0IiwidG9GaXhlZCIsIk9iamVjdCIsInZhbHVlcyIsImlkeCIsInBhdGllbnQiLCJ2aXRhbHMiLCJzcmMiLCJmaXJzdE5hbWUiLCJuYW1lIiwiYWdlIiwic2V4IiwiZm9ybWF0U2V4IiwiaHJlZiIsImVtYWlsIiwiY2VsbFNwYWNpbmciLCJoZWFkZXJzIiwicGFyc2UiLCJlbnRyaWVzIiwibWVhc3VyZW1lbnRzIiwicmV2ZXJzZSIsIm1lYXN1cmVtZW50IiwibWVhc3VyZW1lbnRWYWx1ZSIsIlBhdGllbnRFbnRyeSIsInByb3BzIiwicGF0aWVudEluZm8iLCJwYXRpZW50RGF0YSIsImNvbnRhY3QiLCJwYXRpZW50SUQiLCJjdXJWaXRhbHMiLCJlbGVtIiwic2hvd1BhdGllbnQiLCJkZWxldGVQYXRpZW50IiwiVVJMIiwic2VuZEdldFJlcXVlc3QiLCJyb3V0ZSIsInBhcmFtcyIsImZldGNoIiwibWV0aG9kIiwidGhlbiIsInJlc3AiLCJqc29uIiwicmVzdWx0IiwiY2F0Y2giLCJjb25zb2xlIiwibG9nIiwic2VuZFBvc3RSZXF1ZXN0IiwiY3VyUGFyYW1zIiwiSlNPTiIsInN0cmluZ2lmeSIsIkRhc2hib2FyZCIsImxpc3RlZFBhdGllbnRzIiwic2V0TGlzdGVkUGF0aWVudHMiLCJuZXdQYXRpZW50T3BlbmVkIiwic2V0TW9kYWxOZXdQYXRpZW50Iiwidmlld1BhdGllbnRPcGVuZWQiLCJzZXRNb2RhbFZpZXdQYXRpZW50Iiwidmlld1BhdGllbnRPYmoiLCJzZXRWaWV3UGF0aWVudE9iaiIsInZpZXdQYXRpZW50Vml0YWxzIiwic2V0Vmlld1BhdGllbnRWaXRhbHMiLCJ1c2VFZmZlY3QiLCJ1cGRhdGVQYXRpZW50TGlzdCIsImNhbGxiYWNrIiwiZGVsYXkiLCJzYXZlZENCIiwidXNlUmVmIiwiY3VycmVudCIsInNldEludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsInVzZUludGVydmFsIiwidXBkYXRlVmlld2VkUGF0aWVudFZpdGFscyIsInJlcyIsInJlIiwicmVzdWx0cyIsIk1vZGFsQWRkUGF0aWVudCIsIm9iaiIsIk1vZGFsVmlld1BhdGllbnQiLCJnZXRFbGVtZW50QnlJZCIsInJlbmRlciJdLCJzb3VyY2VSb290IjoiIn0=